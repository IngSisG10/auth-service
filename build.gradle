plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
    id 'org.jetbrains.kotlinx.kover' version '0.9.0'
    id 'org.jlleitschuh.gradle.ktlint' version '13.0.0'
}

group = 'com.ingsis.grupo10'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

allOpen {
    annotation 'jakarta.persistence.Entity'
    annotation 'jakarta.persistence.MappedSuperclass'
    annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("bootRun") {
    doFirst {
        def envFile = file(".env")
        if (envFile.exists()) {
            println "Loading environment variables from .env"
            envFile.eachLine { line ->
                if (line && !line.startsWith("#")) {
                    def parts = line.split("=", 2)
                    if (parts.length == 2) {
                        def key = parts[0].trim()
                        def value = parts[1].trim()
                        environment key, value
                    }
                }
            }
        } else {
            println ".env file not found, skipping..."
        }
    }
kover {
    reports {
        verify {
            rule {
                bound {
                    minValue = 1
                }
            }
        }
    }
}


tasks.named("test") {
    useJUnitPlatform()
}

tasks.register("installGitHooks", Exec) {
    group = "setup"
    description = "Install git hooks"
    commandLine "git", "config", "core.hooksPath", ".github/hooks"
    doLast {
        println("Hooks configured via core.hooksPath")
      }
    }
}
